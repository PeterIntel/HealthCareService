{
  "collection": {
    "_": {
      "postman_id": "3bd6389e-16fe-4ebd-81a9-509730912a96"
    },
    "item": [
      {
        "id": "b3174ef8-66b0-440c-b820-8595dc865d1f",
        "name": "RegisterProCareAgent",
        "description": {},
        "item": [
          {
            "id": "3799f9c5-90fe-4f35-816a-adf29b52d676",
            "name": "Register agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                  "type": "text/javascript",
                  "exec": [
                    "let host = pm.environment.get(\"host\");",
                    "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                    "",
                    "let getRequest = {",
                    "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                    "      method: 'GET',",
                    "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                    "};",
                    "",
                    "let agentCredentialsSchema = {",
                    "    \"required\": [\"serialNumber\", \"password\"],",
                    "    \"properties\":{",
                    "        \"serialNumber\":{",
                    "            \"type\": \"string\"",
                    "        },",
                    "        \"password\": {",
                    "            \"type\": \"string\"",
                    "        }",
                    "    }",
                    "};",
                    "    ",
                    "if(data.testCase === \"agentFields\")",
                    "{",
                    "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "    ",
                    "    if(gatewaySerial !== \"\")",
                    "    {",
                    "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "              pm.sendRequest(getRequest, function (err, response) {",
                    "                pm.expect(response.code).to.eql(404);",
                    "            });  ",
                    "        })",
                    "    }",
                    "}",
                    "else if(data.testCase === \"disabledAccount\"){",
                    "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                    "    pm.response.to.have.status(401);",
                    "    })",
                    "",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "              pm.sendRequest(getRequest, function (err, response) {",
                    "                pm.expect(response.code).to.eql(404);",
                    "            });  ",
                    "        })",
                    "",
                    "    pm.environment.unset(\"disabledUserName\");",
                    "    pm.environment.unset(\"disabledUserPassword\");",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                    "    pm.response.to.have.status(415);",
                    "    })",
                    "",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                    "    if(data.testCase === \"successRegister\")",
                    "    {",
                    "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                    "        pm.response.to.have.status(201);",
                    "        })",
                    "        ",
                    "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                    "    }",
                    "    else if(data.testCase === \"registerWithExistingSerial\"){",
                    "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                    "        pm.response.to.have.status(201);",
                    "        })",
                    "          ",
                    "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                    "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                    "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                    "    }",
                    "    ",
                    "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(200);",
                    "        });  ",
                    "    })",
                    "    ",
                    "    pm.test(\"Body contains SerialNumber\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                    "    });",
                    "",
                    "    pm.test(\"Body contains Password\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"password\");",
                    "    });",
                    "    ",
                    "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                    "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                    "    });",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "    ",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "          pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"userName\");",
                    "pm.environment.unset(\"userPassword\");",
                    "pm.environment.unset(\"gatewaySerial\")",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");"
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                    "pm.globals.set(\"userPassword\", \"Password1!\");",
                    "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                    "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.testCase !== \"registerWithExistingSerial\")",
                    "{",
                    "    if(data.isGatewaySerial)",
                    "    {",
                    "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                    "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                    "    }",
                    "    else{",
                    "        pm.environment.set(\"gatewaySerial\", \"\");",
                    "    }",
                    "}",
                    "else{",
                    "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                    "}",
                    "",
                    "if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.userName == null){",
                    "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                    "    }",
                    "    ",
                    "    if(data.userPassword == null){",
                    "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a8c7b006-7388-4bf4-b266-e260f06e9834",
        "name": "UpdateProCareAgent",
        "description": {},
        "item": [
          {
            "id": "8342a305-1736-45d1-9ac3-96cea878bc75",
            "name": "Update agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents",
                  "{{agentSerialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.isGatewaySerial)",
                    "{",
                    "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"gatewaySerial\", \"\");",
                    "}",
                    "",
                    "if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.generateAgentSerialNumber){",
                    "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    ",
                    "    if(data.generateAgentPassword){",
                    "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                  "type": "text/javascript",
                  "exec": [
                    "if(data.testCase === \"agentFields\")",
                    "{",
                    "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                    "        pm.response.to.have.status(415);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successUpdate\"){",
                    "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                    "        pm.response.to.have.status(200);",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");",
                    "pm.environment.unset(\"gatewaySerial\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3cd05746-dfba-4296-a051-6bac49a26cec",
        "name": "UpdateBedStatus",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "656741ae-3112-400c-8fe8-37a69113a10d",
            "name": "Update bed",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "beds",
                  "{{badSerialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                    "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(pm.info.iteration === 1)",
                    "{",
                    "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                    "}",
                    "",
                    "if(data.testCase === \"wrongBedFields\"){",
                    "    if(data.isSerialNumber)",
                    "    {",
                    "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "    }",
                    "    else{",
                    "        pm.environment.set(\"serialNumber\", \"\");",
                    "    }",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.generateAgentSerialNumber){",
                    "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    ",
                    "    if(data.generateAgentPassword){",
                    "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ],
                  "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                  "type": "text/javascript",
                  "exec": [
                    "if(data.testCase === \"wrongBedFields\"){",
                    "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                    "        pm.response.to.have.status(415);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successUpdate\"){",
                    "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                    "        pm.response.to.have.status(200);",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"agentSerialNumber\");",
                    "pm.environment.unset(\"agentPassword\");",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");"
                  ],
                  "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "acf77858-9da1-418a-98a5-698254f827cf",
        "name": "DeleteProCareAgent",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "3bb512aa-fb10-41dd-8bed-18b9a1c8e729",
            "name": "Delete agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents",
                  "{{serialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83ab09b2-ff00-4b93-8f8c-2dbfe192a3eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                    "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                    "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.testCase === \"deleteAgentWithWrongSerialNumber\"){",
                    "    if(data.agentSerialNumberType === \"random\"){",
                    "        pm.environment.set(\"serialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "}",
                    "else if(data.testCase === \"userWrongCreds\"){",
                    "    if(data.userName == null){",
                    "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                    "    }",
                    "    ",
                    "    if(data.userPassword == null){",
                    "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "774200c2-c0b7-44e7-aaf7-82f8167843ad",
                  "type": "text/javascript",
                  "exec": [
                    "let host = pm.environment.get(\"host\");",
                    "let agentSerialNumber = pm.environment.get(\"serialNumber\");",
                    "",
                    "let getRequest = {",
                    "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + agentSerialNumber + '?api-version=1.0',",
                    "      method: 'GET',",
                    "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                    "};",
                    "",
                    "if(data.testCase === \"deleteAgentWithWrongSerialNumber\"){",
                    "    pm.test(\"Agent can't be deleted because of wrong serial number and status code is 400\", function(){",
                    "        pm.response.to.have.status(404);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent isn't gotten and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"userWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not delete agent with wrong user creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent is gotten and status code is 200\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(200);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"disabledAccount\"){",
                    "    pm.test(\"Agent can't be deleted because of disabled account, status code is 401\", function(){",
                    "    pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"deleteAgentSuccessfully\"){",
                    "    pm.test(\"Agent should be deleted successfully, status code is 204\", function(){",
                    "        pm.response.to.have.status(204);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent isn't gotten and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"userName\");",
                    "pm.environment.unset(\"userPassword\");",
                    "pm.environment.unset(\"serialNumber\");",
                    "pm.environment.unset(\"rightAuthorization\");",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");",
                    "pm.environment.unset(\"rightAuthorization\");",
                    "pm.environment.unset(\"badSerialNumber\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "b16d56fa-b16e-4ec8-8e56-2cafedc85e96",
          "type": "text/javascript",
          "exec": [
            "var CryptoJS = require(\"crypto-js\");",
            "",
            "globalFunctions = {",
            "    makeRandomString: function() {",
            "      var text = \"\";",
            "      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
            "    ",
            "      for (var i = 0; i < 10; i++)",
            "        text += possible.charAt(Math.floor(Math.random() * possible.length));",
            "    ",
            "      return text;",
            "    },",
            "    makeRandomInt:function() {",
            "      var text = \"\";",
            "      var possible = \"0123456789\";",
            "    ",
            "      for (var i = 0; i < 10; i++)",
            "        text += possible.charAt(Math.floor(Math.random() * possible.length));",
            "    ",
            "      return text;",
            "    },",
            "    getAuthToken:function(userName, userPassword) {",
            "      var rawStr = CryptoJS.enc.Utf8.parse(userName + \":\" + userPassword);",
            "      var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
            "    ",
            "      return base64;",
            "    }",
            "};",
            "",
            "pm.environment.set(\"rightAuthorization\", globalFunctions.getAuthToken(pm.globals.get('userName'), pm.globals.get(\"userPassword\")));"
          ],
          "_lastExecutionId": "3e914535-9b55-4030-a336-c74c4c4890d9"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d78e9c9b-15f9-4f6d-acd0-7feb7a5660cf",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "fdb3bca8-a882-4009-801a-0a91b9f06b0b"
        }
      }
    ],
    "variable": [
      {
        "id": "b1160226-bcdf-4432-a3ed-2e7748257759",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "type": "string",
        "value": "1.0",
        "key": "apiVersion"
      }
    ],
    "info": {
      "id": "3bd6389e-16fe-4ebd-81a9-509730912a96",
      "name": "SmartBedAPIGateaway",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2018-05-21T11:59:38.453Z",
      "postman_exported_using": "Newman/3.9.3"
    },
    "id": "0548a04d-dce2-4720-a8ec-743f0cac5d07",
    "name": "DevHealthcare",
    "values": [
      {
        "type": "any",
        "value": "api-procare-d1.physio-labs.com",
        "key": "host"
      },
      {
        "type": "any",
        "value": "c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ==",
        "key": "rightAuthorization"
      },
      {
        "type": "any",
        "value": "7108632732",
        "key": "serialNumber"
      },
      {
        "type": "any",
        "value": "9081742662",
        "key": "badSerialNumber"
      }
    ]
  },
  "globals": {
    "_": {
      "postman_variable_scope": "globals",
      "postman_exported_at": "2018-05-21T11:59:38.453Z",
      "postman_exported_using": "Newman/3.9.3"
    },
    "id": "90d847aa-a75b-406d-878f-fdf89b21222e",
    "name": "My Workspace Globals",
    "values": [
      {
        "type": "any",
        "value": "sem.account.admin014",
        "key": "userName"
      },
      {
        "type": "any",
        "value": "Password1!",
        "key": "userPassword"
      },
      {
        "type": "any",
        "value": "7108632732",
        "key": "agentSerialNumber"
      },
      {
        "type": "any",
        "value": "r0AX0Vmf7ka6ehX0u0Ijjg==",
        "key": "agentPassword"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 48,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 24,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 24,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 286.4166666666667,
      "started": 1526903980467,
      "completed": 1526903985221
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 12,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f13a3ff8-355a-4acf-9396-486ad71500d5",
          "httpRequestId": "040048b0-cc64-432e-bc20-3584c99c1176"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "{{badSerialNumber}}"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 970
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"Med-Surg\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "6033dbab-dc2d-4fac-8b28-caac8967703a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:41 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "0a42c179-3123-4612-b4e5-78158f242db4"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              112,
              105,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              85,
              110,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              65,
              80,
              73,
              32,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              44,
              32,
              98,
              117,
              116,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              46,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 815,
          "responseSize": 105
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "79a6cfc1-dc7a-43a7-8f6d-3ab604a71d4c",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 1,
          "cr": true,
          "httpRequestId": "89b04ca4-43b9-4c8b-b431-58f35be6226c"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 962
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "bf8987f0-f435-4764-9540-e1a55481b8b5",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:41 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "5a08a2ec-fa44-4aa5-847b-bb4385b82863"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              77,
              111,
              100,
              101,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 241,
          "responseSize": 240
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "5e19cbe8-c5a5-4b96-9412-b2c0430bd33d",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 2,
          "cr": true,
          "httpRequestId": "76ca05c2-6667-4424-8a4f-cb15648a035e"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 958
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "f7e58b3b-f115-4437-bf73-611be72b3c20",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:42 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "073ee9c6-b8a4-4e22-88d1-a8bc289c417d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              83,
              101,
              114,
              105,
              97,
              108,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              83,
              101,
              114,
              105,
              97,
              108,
              78,
              117,
              109,
              98,
              101,
              114,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 250,
          "responseSize": 254
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "250e35c9-6ede-4d6f-b346-c9ba277545e1",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 3,
          "cr": true,
          "httpRequestId": "2683d0c9-b18a-489e-a3ef-9cc1072f1e86"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic MjYzNTgyODg1NDpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "76568e21-dc9d-438d-85de-524a7f417f0c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:42 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "bbc711d6-14fc-4fe8-92a4-b58b79b2ad9d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 206,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "b1209d0d-45a8-44c2-a831-1b0389a990d3",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 4,
          "cr": true,
          "httpRequestId": "2175adf4-272f-4b68-894a-418351f7e0b0"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjo5Mjc5Njc2NzM3"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "7bc6857e-1b6a-41da-9338-491853f70d06",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:42 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "d8909012-f01d-4ceb-bb49-17cc3721cd93"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 225,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "960dbac0-c768-4db9-a270-7baa1c8f9c85",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 5,
          "cr": true,
          "httpRequestId": "9c318e07-2949-4a91-8daa-80d75de153ac"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjo="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "f131bfa5-c9a9-4763-9644-e417f05bdb83",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:43 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "7b09cf0b-2f37-49ed-9591-9933f70d514d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 192,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "15430458-78d2-4aea-9024-03cb30577f6e",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 6,
          "cr": true,
          "httpRequestId": "98ed4f3a-3963-44b4-950c-44d23067669d"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "",
              "value": "{{authorizationHeaderToken}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "a9eec78d-1820-4ba1-aeda-01069dd39b3e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:43 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "f0afb719-53be-4853-8353-200c52fd9cd4"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 191,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "14a34cc8-9625-4392-b4c4-221d1decb00c",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 7,
          "cr": true,
          "httpRequestId": "4249e986-194c-4800-bd2f-d78c1a2720ee"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "12e269ad-3a9e-4b6f-9d75-45a856f95704",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:43 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "b8477b97-bc78-4ab1-863e-ea8b78eda750"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 234,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "6dd6f21a-7cbe-4a87-a7ec-b1aa5cbc5cff",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 8,
          "cr": true,
          "httpRequestId": "062285df-f749-43c5-a41d-26d5100d8d3d"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "280af41c-6225-47ce-a596-df37c1fc0511",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:43 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "0f3b11b8-988e-4345-8223-4f1e56e3fc4f"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "358fd1ad-e8f4-46fe-83fc-e7d8189e140f",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 9,
          "cr": true,
          "httpRequestId": "28727406-40f7-4e79-a2db-7258c8411532"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/javascript"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "e5ae6b8a-9eb5-4f11-967a-cecae5ba8fc5",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:44 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "aaa514ba-c443-4798-84e6-878c04aac992"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "bbef4a6b-fd26-41fa-990f-bfeda5e2d57b",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 10,
          "cr": true,
          "httpRequestId": "8ba1d1cb-a41b-4842-97a1-80a0365376e5"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 968
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-jHH\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed1\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "913f3cb2-fa9d-4949-a571-64b9edde01c6",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:44 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "a9e04ff2-6f9a-4dc6-a88b-230609846b23"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 230,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "0bf9c5ea-e138-4062-804f-2c13762cbc69",
          "length": 1,
          "cycles": 12,
          "position": 0,
          "iteration": 11,
          "cr": true,
          "httpRequestId": "054d2e0d-ae3b-4e0f-9335-0822ee075d89"
        },
        "item": {
          "id": "656741ae-3112-400c-8fe8-37a69113a10d",
          "name": "Update bed",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "beds",
                "{{badSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(pm.info.iteration === 1)",
                  "{",
                  "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                  "}",
                  "",
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    if(data.isSerialNumber)",
                  "    {",
                  "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"serialNumber\", \"\");",
                  "    }",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "e076eb13-ccf9-4a66-938a-a3913fc65287"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"wrongBedFields\"){",
                  "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"agentSerialNumber\");",
                  "pm.environment.unset(\"agentPassword\");",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "5ccc0e3e-cf00-4f1c-b3d6-b2534c9fdf62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "beds",
              "9081742662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 969
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"model\": \"FG-233\",\n\t\"serialNumber\": \"7108632732\",\n\t\"online\": true,\n\t\"connectionUptime\": 80.022791,\n\t\"ipAddress\": \"172.156.10.11\",\n\t\"rssi\": -65,\n\t\"location\": \"RoomMed13\",\n\t\"macAddress\": \"pqrst\",\n\t\"networkAddress\": \"http://localhost/device97/service.asmx/Interface\",\n\t\"softwareVersion\": \"1.0\",\n\t\"activeDeviceError\": true,\n\t\"activeDeviceErrorInformation\": \"load cell error\",\n\t\"deviceErrorLog1\": \"FR LoadCell Error\",\n\t\"deviceErrorLog2\": \"FRSR Switch Error\",\n\t\"deviceErrorLog3\": \"HRSR Switch Error\",\n\t\"deviceErrorLog4\": \"FLSR Switch Error\",\n\t\"deviceErrorLog5\": \"FLSR Switch Error\",\n\t\"deviceErrorLog6\": \"FLSR Switch Error\",\n\t\"deviceErrorLog7\": \"\",\n\t\"deviceErrorLog8\": \"\",\n\t\"deviceErrorLog9\": \"\",\n\t\"deviceErrorLog10\": \"\",\n\t\"patientPresent\": true,\n\t\"bedExitAlarming\": true,\n\t\"bedExitArmed\": true,\n\t\"brakeOn\": true,\n\t\"flSiderailUp\": true,\n\t\"frSiderailUp\": false,\n\t\"hlSiderailUp\": true,\n\t\"hrSiderailUp\": true,\n\t\"lbsAlarming\": false,\n\t\"lbsArmed\": false,\n\t\"lowBedHeight\": true\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "c4de5807-7fde-426c-b9bc-4653013c2756",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:45 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "32680a1a-584d-4abc-9c22-2126454b2bb5"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 395,
          "responseSize": 0
        },
        "id": "656741ae-3112-400c-8fe8-37a69113a10d",
        "assertions": [
          {
            "assertion": "Bed should be updated successfully, status code is 200"
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 599
    },
    "failures": [],
    "error": null
  }
}