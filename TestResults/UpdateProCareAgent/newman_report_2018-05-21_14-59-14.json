{
  "collection": {
    "_": {
      "postman_id": "3bd6389e-16fe-4ebd-81a9-509730912a96"
    },
    "item": [
      {
        "id": "2f08010a-d08c-4d8c-a5ba-d5f35f0c61e1",
        "name": "RegisterProCareAgent",
        "description": {},
        "item": [
          {
            "id": "df9929fa-c77e-4c68-ac73-ffb716f762ae",
            "name": "Register agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                  "type": "text/javascript",
                  "exec": [
                    "let host = pm.environment.get(\"host\");",
                    "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                    "",
                    "let getRequest = {",
                    "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                    "      method: 'GET',",
                    "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                    "};",
                    "",
                    "let agentCredentialsSchema = {",
                    "    \"required\": [\"serialNumber\", \"password\"],",
                    "    \"properties\":{",
                    "        \"serialNumber\":{",
                    "            \"type\": \"string\"",
                    "        },",
                    "        \"password\": {",
                    "            \"type\": \"string\"",
                    "        }",
                    "    }",
                    "};",
                    "    ",
                    "if(data.testCase === \"agentFields\")",
                    "{",
                    "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "    ",
                    "    if(gatewaySerial !== \"\")",
                    "    {",
                    "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "              pm.sendRequest(getRequest, function (err, response) {",
                    "                pm.expect(response.code).to.eql(404);",
                    "            });  ",
                    "        })",
                    "    }",
                    "}",
                    "else if(data.testCase === \"disabledAccount\"){",
                    "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                    "    pm.response.to.have.status(401);",
                    "    })",
                    "",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "              pm.sendRequest(getRequest, function (err, response) {",
                    "                pm.expect(response.code).to.eql(404);",
                    "            });  ",
                    "        })",
                    "",
                    "    pm.environment.unset(\"disabledUserName\");",
                    "    pm.environment.unset(\"disabledUserPassword\");",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                    "    pm.response.to.have.status(415);",
                    "    })",
                    "",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                    "    if(data.testCase === \"successRegister\")",
                    "    {",
                    "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                    "        pm.response.to.have.status(201);",
                    "        })",
                    "        ",
                    "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                    "    }",
                    "    else if(data.testCase === \"registerWithExistingSerial\"){",
                    "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                    "        pm.response.to.have.status(201);",
                    "        })",
                    "          ",
                    "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                    "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                    "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                    "    }",
                    "    ",
                    "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(200);",
                    "        });  ",
                    "    })",
                    "    ",
                    "    pm.test(\"Body contains SerialNumber\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                    "    });",
                    "",
                    "    pm.test(\"Body contains Password\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"password\");",
                    "    });",
                    "    ",
                    "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                    "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                    "    });",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "    ",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "          pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"userName\");",
                    "pm.environment.unset(\"userPassword\");",
                    "pm.environment.unset(\"gatewaySerial\")",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");"
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                    "pm.globals.set(\"userPassword\", \"Password1!\");",
                    "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                    "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.testCase !== \"registerWithExistingSerial\")",
                    "{",
                    "    if(data.isGatewaySerial)",
                    "    {",
                    "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                    "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                    "    }",
                    "    else{",
                    "        pm.environment.set(\"gatewaySerial\", \"\");",
                    "    }",
                    "}",
                    "else{",
                    "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                    "}",
                    "",
                    "if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.userName == null){",
                    "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                    "    }",
                    "    ",
                    "    if(data.userPassword == null){",
                    "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b13cc315-3cc4-4011-8184-f30f2ae48a08",
        "name": "UpdateProCareAgent",
        "description": {},
        "item": [
          {
            "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
            "name": "Update agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents",
                  "{{agentSerialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.isGatewaySerial)",
                    "{",
                    "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"gatewaySerial\", \"\");",
                    "}",
                    "",
                    "if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.generateAgentSerialNumber){",
                    "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    ",
                    "    if(data.generateAgentPassword){",
                    "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ],
                  "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                  "type": "text/javascript",
                  "exec": [
                    "if(data.testCase === \"agentFields\")",
                    "{",
                    "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                    "        pm.response.to.have.status(415);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successUpdate\"){",
                    "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                    "        pm.response.to.have.status(200);",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");",
                    "pm.environment.unset(\"gatewaySerial\");"
                  ],
                  "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4e75d0a7-ad26-4444-b2f7-b9a3a02cd3bb",
        "name": "UpdateBedStatus",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "87122262-5ef6-4404-ac7d-e31647ec7d0c",
            "name": "Update bed",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "beds",
                  "{{badSerialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                    "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(pm.info.iteration === 1)",
                    "{",
                    "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                    "}",
                    "",
                    "if(data.testCase === \"wrongBedFields\"){",
                    "    if(data.isSerialNumber)",
                    "    {",
                    "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "    }",
                    "    else{",
                    "        pm.environment.set(\"serialNumber\", \"\");",
                    "    }",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.generateAgentSerialNumber){",
                    "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    ",
                    "    if(data.generateAgentPassword){",
                    "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                  "type": "text/javascript",
                  "exec": [
                    "if(data.testCase === \"wrongBedFields\"){",
                    "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                    "        pm.response.to.have.status(415);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successUpdate\"){",
                    "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                    "        pm.response.to.have.status(200);",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"agentSerialNumber\");",
                    "pm.environment.unset(\"agentPassword\");",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "63162a9c-e82c-4f13-8ed5-a0d8952d2f5a",
        "name": "DeleteProCareAgent",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "5f97e0ea-b6b1-4585-aeea-52f42e4ca5a4",
            "name": "Delete agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents",
                  "{{serialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83ab09b2-ff00-4b93-8f8c-2dbfe192a3eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                    "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                    "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.testCase === \"deleteAgentWithWrongSerialNumber\"){",
                    "    if(data.agentSerialNumberType === \"random\"){",
                    "        pm.environment.set(\"serialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "}",
                    "else if(data.testCase === \"userWrongCreds\"){",
                    "    if(data.userName == null){",
                    "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                    "    }",
                    "    ",
                    "    if(data.userPassword == null){",
                    "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "774200c2-c0b7-44e7-aaf7-82f8167843ad",
                  "type": "text/javascript",
                  "exec": [
                    "let host = pm.environment.get(\"host\");",
                    "let agentSerialNumber = pm.environment.get(\"serialNumber\");",
                    "",
                    "let getRequest = {",
                    "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + agentSerialNumber + '?api-version=1.0',",
                    "      method: 'GET',",
                    "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                    "};",
                    "",
                    "if(data.testCase === \"deleteAgentWithWrongSerialNumber\"){",
                    "    pm.test(\"Agent can't be deleted because of wrong serial number and status code is 400\", function(){",
                    "        pm.response.to.have.status(404);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent isn't gotten and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"userWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not delete agent with wrong user creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent is gotten and status code is 200\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(200);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"disabledAccount\"){",
                    "    pm.test(\"Agent can't be deleted because of disabled account, status code is 401\", function(){",
                    "    pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"deleteAgentSuccessfully\"){",
                    "    pm.test(\"Agent should be deleted successfully, status code is 204\", function(){",
                    "        pm.response.to.have.status(204);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent isn't gotten and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"userName\");",
                    "pm.environment.unset(\"userPassword\");",
                    "pm.environment.unset(\"serialNumber\");",
                    "pm.environment.unset(\"rightAuthorization\");",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");",
                    "pm.environment.unset(\"rightAuthorization\");",
                    "pm.environment.unset(\"badSerialNumber\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "b16d56fa-b16e-4ec8-8e56-2cafedc85e96",
          "type": "text/javascript",
          "exec": [
            "var CryptoJS = require(\"crypto-js\");",
            "",
            "globalFunctions = {",
            "    makeRandomString: function() {",
            "      var text = \"\";",
            "      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
            "    ",
            "      for (var i = 0; i < 10; i++)",
            "        text += possible.charAt(Math.floor(Math.random() * possible.length));",
            "    ",
            "      return text;",
            "    },",
            "    makeRandomInt:function() {",
            "      var text = \"\";",
            "      var possible = \"0123456789\";",
            "    ",
            "      for (var i = 0; i < 10; i++)",
            "        text += possible.charAt(Math.floor(Math.random() * possible.length));",
            "    ",
            "      return text;",
            "    },",
            "    getAuthToken:function(userName, userPassword) {",
            "      var rawStr = CryptoJS.enc.Utf8.parse(userName + \":\" + userPassword);",
            "      var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
            "    ",
            "      return base64;",
            "    }",
            "};",
            "",
            "pm.environment.set(\"rightAuthorization\", globalFunctions.getAuthToken(pm.globals.get('userName'), pm.globals.get(\"userPassword\")));"
          ],
          "_lastExecutionId": "fc58611c-4bde-41d5-bad5-4ac92f053cdb"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d78e9c9b-15f9-4f6d-acd0-7feb7a5660cf",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "d9ac05d1-0f61-43fb-8ad1-a517fddbe6d0"
        }
      }
    ],
    "variable": [
      {
        "id": "b1160226-bcdf-4432-a3ed-2e7748257759",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "type": "string",
        "value": "1.0",
        "key": "apiVersion"
      }
    ],
    "info": {
      "id": "3bd6389e-16fe-4ebd-81a9-509730912a96",
      "name": "SmartBedAPIGateaway",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2018-05-21T11:59:30.313Z",
      "postman_exported_using": "Newman/3.9.3"
    },
    "id": "0548a04d-dce2-4720-a8ec-743f0cac5d07",
    "name": "DevHealthcare",
    "values": [
      {
        "type": "any",
        "value": "api-procare-d1.physio-labs.com",
        "key": "host"
      },
      {
        "type": "any",
        "value": "c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ==",
        "key": "rightAuthorization"
      },
      {
        "type": "any",
        "value": "7108632732",
        "key": "agentSerialNumber"
      },
      {
        "type": "any",
        "value": "r0AX0Vmf7ka6ehX0u0Ijjg==",
        "key": "agentPassword"
      }
    ]
  },
  "globals": {
    "_": {
      "postman_variable_scope": "globals",
      "postman_exported_at": "2018-05-21T11:59:30.313Z",
      "postman_exported_using": "Newman/3.9.3"
    },
    "id": "90d847aa-a75b-406d-878f-fdf89b21222e",
    "name": "My Workspace Globals",
    "values": [
      {
        "type": "any",
        "value": "sem.account.admin014",
        "key": "userName"
      },
      {
        "type": "any",
        "value": "Password1!",
        "key": "userPassword"
      },
      {
        "type": "any",
        "value": "7108632732",
        "key": "agentSerialNumber"
      },
      {
        "type": "any",
        "value": "r0AX0Vmf7ka6ehX0u0Ijjg==",
        "key": "agentPassword"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 32,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 274.75,
      "started": 1526903972322,
      "completed": 1526903978413
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 16,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1b1dce14-75e8-43d1-bf23-8a7b813a7863",
          "httpRequestId": "547fffda-c3f8-47f0-80d4-ec2b674e501a"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 194
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "2c4330a3-62d4-4e70-8082-0eeab4d768d0",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "f124973c-3150-4011-a6a0-2034c0b3b964"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              77,
              111,
              100,
              101,
              108,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              77,
              111,
              100,
              101,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 862,
          "responseSize": 254
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "6b4846a9-8935-43a8-ab12-d6032b1db8d4",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 1,
          "cr": true,
          "httpRequestId": "e49ef4cf-7829-4795-a000-e73cd1b6375b"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 202
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "d2a82aba-9b9a-4ae6-b18e-da64c3b855e0",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "75fe8a78-484e-4d13-bb70-1cb7a97896c6"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 236,
          "responseSize": 256
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "8d7d58e3-4f86-4d7a-8d8d-ce5154125882",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 2,
          "cr": true,
          "httpRequestId": "bd1f25f7-3f50-4960-a719-b716b77b35a4"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 190
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "0fb021ac-768e-4687-b520-ee3d73066539",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "da5468ab-2e76-4029-8627-119729449222"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              68,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              68,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 240,
          "responseSize": 252
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "b7550c8a-8ffa-47b6-a686-13a228b50afd",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 3,
          "cr": true,
          "httpRequestId": "96af2f83-3fa5-496b-b9b6-6f8784f7c2c3"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 205
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "3779c092-2951-4795-8318-96c3afb3e66d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "c3f556ff-5def-4547-9c14-de8878e97816"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              83,
              111,
              102,
              116,
              119,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              83,
              111,
              102,
              116,
              119,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 240,
          "responseSize": 260
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "7ce29ab0-0ddd-4fdd-992b-416ef388a480",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 4,
          "cr": true,
          "httpRequestId": "ad071d03-01c2-496f-b2d0-97c4eabb2207"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 212
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "24eb6304-4540-4e86-84f7-65834fad7452",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "e1dd3325-a44b-4c8e-a25b-41f056b08c48"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              112,
              105,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              85,
              110,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              65,
              80,
              73,
              32,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              44,
              32,
              98,
              117,
              116,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              46,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 193,
          "responseSize": 105
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "a2376649-3bab-48a3-bdd2-4648a54e0cba",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 5,
          "cr": true,
          "httpRequestId": "df0c6dde-e3b4-4367-967a-c7b196cd0810"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 213
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": -100\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "c832d2e4-b6ef-4492-b8b5-70e68469cac2",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "c7a3d3dc-ab5f-4132-92ea-feade9ee19c4"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 255,
          "responseSize": 219
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "64b6898d-88c7-4c6f-baef-579295a2a394",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 6,
          "cr": true,
          "httpRequestId": "ae488553-cc4d-4991-87c6-f3bd2c4e0a31"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 213
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": text\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "00cd7a96-d4f9-45ef-8544-73e93ea66bb1",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "180df55b-7f45-430d-900f-9f46edc50259"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              34,
              125,
              44,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 353,
          "responseSize": 258
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "This agent can't be updated because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "011db36e-aef3-4f18-9dce-e18eb432def1",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 7,
          "cr": true,
          "httpRequestId": "02908cbd-c0b5-4586-a846-2c9d05ba57f7"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjoyMDE2NjM3MDIx"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 213
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": text\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "838ade79-a35b-4451-9956-939c80affed8",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:35 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "38a3542a-92d0-48c3-9bac-43ff27e45210"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Do not update agent with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f2234b32-9f1f-4fac-a99a-4690dafe69ca",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 8,
          "cr": true,
          "httpRequestId": "85fc4a92-742b-480a-9751-9cbe37c3d3cb"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7222133945"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzIyMjEzMzk0NTpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 213
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": text\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "20987e27-ebff-4b7a-8869-2aa96f4ad481",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:36 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "373a19ba-1ec6-4ac6-9281-05b4d7bf367f"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 200,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Do not update agent with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f73f6c2d-3406-4a9f-85e1-7165b82995fa",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 9,
          "cr": true,
          "httpRequestId": "5f5006f4-9f28-4ab5-a9f0-0b9dd314b0e2"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjo="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 213
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": text\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "62772be4-72ca-4961-87cf-050e74a99162",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:36 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "c9009cfe-fe6a-45fb-8692-6735998c6d68"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 198,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Do not update agent with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "6aedcd39-537d-4870-b915-4482d66d60ec",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 10,
          "cr": true,
          "httpRequestId": "1a1d62b8-70a0-46f3-8f04-c93ae7388986"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "",
              "value": "{{authorizationHeaderToken}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 212
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 100\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "1af0d84f-d066-4c42-924b-ac18cc25ae0f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:36 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "2702f88f-1503-4ffe-a65d-44a405131bda"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 187,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Do not update agent with wrong agent creds"
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0ab8e64-f4e5-4d3b-9257-a4b4f5d0612c",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 11,
          "cr": true,
          "httpRequestId": "10fba643-db4a-4a8f-868f-4b8c3244208c"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 212
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "dabfcdd0-73a1-4670-9f71-66657fdac58d",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:37 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "978cb9b0-6fb1-4ad5-b7cb-3ebace33231d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Agent can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3641a5e1-7ed7-4dc8-bd68-7b276f79a7f8",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 12,
          "cr": true,
          "httpRequestId": "4639f409-2e67-4465-b79c-b71a47d8f4bf"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 212
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "c6031661-df6d-4513-9b31-68120a04c17a",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:37 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "a7d8f4ca-09e0-484a-985c-81f8cb17998d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 225,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Agent can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "9ae26485-0f75-410f-bd95-2835fa6202e4",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 13,
          "cr": true,
          "httpRequestId": "96bd778f-8415-4d9d-8442-8504a1d181bc"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/javascript"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 212
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "4f362067-6ac9-46b3-8551-1c8c5bf7386e",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:37 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "82cc2377-a71c-4e9e-98c6-94deb7596c9e"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 228,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Agent can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "a41e47c9-714a-4ee2-90eb-c14b99e749a2",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 14,
          "cr": true,
          "httpRequestId": "55e0c6e4-b64e-4e5f-a5e8-b812a647d2f5"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 212
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "52e44870-b494-4f0d-b6a3-fce0759cbbbd",
          "status": "Unsupported Media Type",
          "code": 415,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:37 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "17f449b2-4cf2-4fd7-9b51-3b2f0e6e07bd"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 248,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Agent can't be updated because of unsupported media type, status code is 415"
          }
        ]
      },
      {
        "cursor": {
          "ref": "e3c22152-d739-4a30-9856-faff4f9dff6c",
          "length": 1,
          "cycles": 16,
          "position": 0,
          "iteration": 15,
          "cr": true,
          "httpRequestId": "ffa7ea80-6e53-4711-95c2-1da983840d23"
        },
        "item": {
          "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
          "name": "Update agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents",
                "{{agentSerialNumber}}"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                  "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.isGatewaySerial)",
                  "{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", \"\");",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.generateAgentSerialNumber){",
                  "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                  "    }",
                  "    ",
                  "    if(data.generateAgentPassword){",
                  "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "edf7f60b-db1f-432e-adf7-aad0eb6788ca"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                "type": "text/javascript",
                "exec": [
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                  "        pm.response.to.have.status(415);",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successUpdate\"){",
                  "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                  "        pm.response.to.have.status(200);",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");",
                  "pm.environment.unset(\"gatewaySerial\");"
                ],
                "_lastExecutionId": "8ce999f7-602f-4c7e-879c-27e21c69d2ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic NzEwODYzMjczMjpyMEFYMFZtZjdrYTZlaFgwdTBJampnPT0="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 214
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_11111\",\r\n  \"gatewaySerial\": \"7108632732\",\r\n  \"ipAddress\": \"172.156.50.63\",\r\n  \"softwareVersion\": \"1.0.0.3\",\r\n  \"description\": \"University of Kentuckyw\",\r\n  \"totalDevices\": 8001\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "a890033d-f47a-4f40-a559-b510e7312f43",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:38 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "a83d2d89-4173-4e57-b7fe-844b32a5b8fb"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 273,
          "responseSize": 0
        },
        "id": "e1107582-b384-4f75-9cde-9106a6b1afc8",
        "assertions": [
          {
            "assertion": "Agent should be registered successfully, status code is 200"
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1604
    },
    "failures": [],
    "error": null
  }
}