{
  "collection": {
    "_": {
      "postman_id": "3bd6389e-16fe-4ebd-81a9-509730912a96"
    },
    "item": [
      {
        "id": "132db843-fdde-4ec4-a9dd-b9137398f9c6",
        "name": "RegisterProCareAgent",
        "description": {},
        "item": [
          {
            "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
            "name": "Register agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                  "type": "text/javascript",
                  "exec": [
                    "let host = pm.environment.get(\"host\");",
                    "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                    "",
                    "let getRequest = {",
                    "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                    "      method: 'GET',",
                    "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                    "};",
                    "",
                    "let agentCredentialsSchema = {",
                    "    \"required\": [\"serialNumber\", \"password\"],",
                    "    \"properties\":{",
                    "        \"serialNumber\":{",
                    "            \"type\": \"string\"",
                    "        },",
                    "        \"password\": {",
                    "            \"type\": \"string\"",
                    "        }",
                    "    }",
                    "};",
                    "    ",
                    "if(data.testCase === \"agentFields\")",
                    "{",
                    "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "    ",
                    "    if(gatewaySerial !== \"\")",
                    "    {",
                    "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "              pm.sendRequest(getRequest, function (err, response) {",
                    "                pm.expect(response.code).to.eql(404);",
                    "            });  ",
                    "        })",
                    "    }",
                    "}",
                    "else if(data.testCase === \"disabledAccount\"){",
                    "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                    "    pm.response.to.have.status(401);",
                    "    })",
                    "",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "              pm.sendRequest(getRequest, function (err, response) {",
                    "                pm.expect(response.code).to.eql(404);",
                    "            });  ",
                    "        })",
                    "",
                    "    pm.environment.unset(\"disabledUserName\");",
                    "    pm.environment.unset(\"disabledUserPassword\");",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                    "    pm.response.to.have.status(415);",
                    "    })",
                    "",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                    "    if(data.testCase === \"successRegister\")",
                    "    {",
                    "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                    "        pm.response.to.have.status(201);",
                    "        })",
                    "        ",
                    "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                    "    }",
                    "    else if(data.testCase === \"registerWithExistingSerial\"){",
                    "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                    "        pm.response.to.have.status(201);",
                    "        })",
                    "          ",
                    "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                    "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                    "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                    "    }",
                    "    ",
                    "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(200);",
                    "        });  ",
                    "    })",
                    "    ",
                    "    pm.test(\"Body contains SerialNumber\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                    "    });",
                    "",
                    "    pm.test(\"Body contains Password\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"password\");",
                    "    });",
                    "    ",
                    "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                    "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                    "    });",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "    ",
                    "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                    "          pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"userName\");",
                    "pm.environment.unset(\"userPassword\");",
                    "pm.environment.unset(\"gatewaySerial\")",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");"
                  ],
                  "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                    "pm.globals.set(\"userPassword\", \"Password1!\");",
                    "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                    "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.testCase !== \"registerWithExistingSerial\")",
                    "{",
                    "    if(data.isGatewaySerial)",
                    "    {",
                    "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                    "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                    "    }",
                    "    else{",
                    "        pm.environment.set(\"gatewaySerial\", \"\");",
                    "    }",
                    "}",
                    "else{",
                    "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                    "}",
                    "",
                    "if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.userName == null){",
                    "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                    "    }",
                    "    ",
                    "    if(data.userPassword == null){",
                    "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ],
                  "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9f4b449d-67e2-440e-9854-c0ecdc77ee9c",
        "name": "UpdateProCareAgent",
        "description": {},
        "item": [
          {
            "id": "dab53fd7-5a7d-49a7-a7d1-56115da129fe",
            "name": "Update agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents",
                  "{{agentSerialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "102e0087-9b03-44e8-9bc2-ea0b61fd10c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.isGatewaySerial)",
                    "{",
                    "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"agentSerialNumber\"));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"gatewaySerial\", \"\");",
                    "}",
                    "",
                    "if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.generateAgentSerialNumber){",
                    "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    ",
                    "    if(data.generateAgentPassword){",
                    "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9ee503d-7821-432e-8a46-9364effb5276",
                  "type": "text/javascript",
                  "exec": [
                    "if(data.testCase === \"agentFields\")",
                    "{",
                    "    pm.test(\"This agent can't be updated because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not update agent with wrong agent creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "        pm.test(\"Agent can't be updated because of unsupported media type, status code is 415\", function(){",
                    "        pm.response.to.have.status(415);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successUpdate\"){",
                    "    pm.test(\"Agent should be registered successfully, status code is 200\", function(){",
                    "        pm.response.to.have.status(200);",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");",
                    "pm.environment.unset(\"gatewaySerial\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0657601a-4a86-427b-b62e-1c3a52bdbc83",
        "name": "UpdateBedStatus",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "8a82849c-11f9-48c8-8f2e-b8212d414fd5",
            "name": "Update bed",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "beds",
                  "{{badSerialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "{{mediaType}}"
                },
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n\t\"model\": \"{{model}}\",\n\t\"serialNumber\": \"{{serialNumber}}\",\n\t\"online\": {{online}},\n\t\"connectionUptime\": {{connectionUptime}},\n\t\"ipAddress\": \"{{ipAddress}}\",\n\t\"rssi\": {{rssi}},\n\t\"location\": \"{{location}}\",\n\t\"macAddress\": \"{{macAddress}}\",\n\t\"networkAddress\": \"{{networkAddress}}\",\n\t\"softwareVersion\": \"{{softwareVersion}}\",\n\t\"activeDeviceError\": {{activeDeviceError}},\n\t\"activeDeviceErrorInformation\": \"{{activeDeviceErrorInformation}}\",\n\t\"deviceErrorLog1\": \"{{deviceErrorLog1}}\",\n\t\"deviceErrorLog2\": \"{{deviceErrorLog2}}\",\n\t\"deviceErrorLog3\": \"{{deviceErrorLog3}}\",\n\t\"deviceErrorLog4\": \"{{deviceErrorLog4}}\",\n\t\"deviceErrorLog5\": \"{{deviceErrorLog5}}\",\n\t\"deviceErrorLog6\": \"{{deviceErrorLog6}}\",\n\t\"deviceErrorLog7\": \"{{deviceErrorLog7}}\",\n\t\"deviceErrorLog8\": \"{{deviceErrorLog8}}\",\n\t\"deviceErrorLog9\": \"{{deviceErrorLog9}}\",\n\t\"deviceErrorLog10\": \"{{deviceErrorLog10}}\",\n\t\"patientPresent\": {{patientPresent}},\n\t\"bedExitAlarming\": {{bedExitAlarming}},\n\t\"bedExitArmed\": {{bedExitArmed}},\n\t\"brakeOn\": {{brakeOn}},\n\t\"flSiderailUp\": {{flSiderailUp}},\n\t\"frSiderailUp\": {{frSiderailUp}},\n\t\"hlSiderailUp\": {{hlSiderailUp}},\n\t\"hrSiderailUp\": {{hrSiderailUp}},\n\t\"lbsAlarming\": {{lbsAlarming}},\n\t\"lbsArmed\": {{lbsArmed}},\n\t\"lowBedHeight\": {{lowBedHeight}}\n}"
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcc41066-41f2-40dc-9787-f6958e928b29",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"agentSerialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "pm.environment.set(\"agentPassword\", pm.globals.get(\"agentPassword\"));",
                    "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(pm.info.iteration === 1)",
                    "{",
                    "    pm.environment.set(\"badSerialNumber\", globalFunctions.makeRandomInt());",
                    "}",
                    "",
                    "if(data.testCase === \"wrongBedFields\"){",
                    "    if(data.isSerialNumber)",
                    "    {",
                    "        pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "    }",
                    "    else{",
                    "        pm.environment.set(\"serialNumber\", \"\");",
                    "    }",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    if(data.generateAgentSerialNumber){",
                    "        pm.environment.set(\"agentSerialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    ",
                    "    if(data.generateAgentPassword){",
                    "        pm.environment.set(\"agentPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('agentSerialNumber'), pm.variables.get(\"agentPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e95ac9a9-81ca-4b36-8fe8-729fbe5d9d7d",
                  "type": "text/javascript",
                  "exec": [
                    "if(data.testCase === \"wrongBedFields\"){",
                    "    pm.test(\"Bed can't be updated because of leak of required field\", function(){",
                    "        pm.response.to.have.status(400);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"agentWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Bed can't be updated with wrong agent creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"unsupportedTypes\"){",
                    "    pm.test(\"Bed can't be updated because of unsupported media type, status code is 415\", function(){",
                    "        pm.response.to.have.status(415);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"successUpdate\"){",
                    "    pm.test(\"Bed should be updated successfully, status code is 200\", function(){",
                    "        pm.response.to.have.status(200);",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"agentSerialNumber\");",
                    "pm.environment.unset(\"agentPassword\");",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "18bf4c89-0208-4816-9eb8-ad6eb5a7deac",
        "name": "DeleteProCareAgent",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "f16bab67-7c13-45ed-a25c-f78f86403c2c",
            "name": "Delete agent",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "bedagents",
                  "{{serialNumber}}"
                ],
                "host": [
                  "{{host}}"
                ],
                "query": [
                  {
                    "key": "api-version",
                    "value": "{{apiVersion}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "{{authorization}}",
                  "value": "{{authorizationHeaderToken}}"
                }
              ],
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83ab09b2-ff00-4b93-8f8c-2dbfe192a3eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                    "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                    "pm.environment.set(\"serialNumber\", pm.globals.get(\"agentSerialNumber\"));",
                    "let isBasicAuth = true;",
                    "",
                    "if(data.testCase === \"deleteAgentWithWrongSerialNumber\"){",
                    "    if(data.agentSerialNumberType === \"random\"){",
                    "        pm.environment.set(\"serialNumber\", globalFunctions.makeRandomInt());",
                    "    }",
                    "}",
                    "else if(data.testCase === \"userWrongCreds\"){",
                    "    if(data.userName == null){",
                    "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                    "    }",
                    "    ",
                    "    if(data.userPassword == null){",
                    "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                    "    }",
                    "",
                    "    if(!data.isAuth){",
                    "        isBasicAuth = false;",
                    "    }",
                    "}",
                    "",
                    "if(isBasicAuth)",
                    "{",
                    "    pm.environment.set(\"authorization\", \"Authorization\");",
                    "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                    "}",
                    "else{",
                    "    pm.environment.set(\"authorization\", \"\");   ",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "774200c2-c0b7-44e7-aaf7-82f8167843ad",
                  "type": "text/javascript",
                  "exec": [
                    "let host = pm.environment.get(\"host\");",
                    "let agentSerialNumber = pm.environment.get(\"serialNumber\");",
                    "",
                    "let getRequest = {",
                    "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + agentSerialNumber + '?api-version=1.0',",
                    "      method: 'GET',",
                    "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                    "};",
                    "",
                    "if(data.testCase === \"deleteAgentWithWrongSerialNumber\"){",
                    "    pm.test(\"Agent can't be deleted because of wrong serial number and status code is 400\", function(){",
                    "        pm.response.to.have.status(404);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent isn't gotten and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"userWrongCreds\"){",
                    "    ",
                    "    pm.test(\"Do not delete agent with wrong user creds\", function(){",
                    "        pm.response.to.have.status(401);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent is gotten and status code is 200\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(200);",
                    "        });  ",
                    "    })",
                    "}",
                    "else if(data.testCase === \"disabledAccount\"){",
                    "    pm.test(\"Agent can't be deleted because of disabled account, status code is 401\", function(){",
                    "    pm.response.to.have.status(401);",
                    "    })",
                    "}",
                    "else if(data.testCase === \"deleteAgentSuccessfully\"){",
                    "    pm.test(\"Agent should be deleted successfully, status code is 204\", function(){",
                    "        pm.response.to.have.status(204);",
                    "    })",
                    "    ",
                    "    pm.test(\"Agent isn't gotten and status code is 404\", function(){",
                    "        pm.sendRequest(getRequest, function (err, response) {",
                    "            pm.expect(response.code).to.eql(404);",
                    "        });  ",
                    "    })",
                    "}",
                    "",
                    "pm.environment.unset(\"userName\");",
                    "pm.environment.unset(\"userPassword\");",
                    "pm.environment.unset(\"serialNumber\");",
                    "pm.environment.unset(\"rightAuthorization\");",
                    "pm.environment.unset(\"authorization\");",
                    "pm.environment.unset(\"authorizationHeaderToken\");",
                    "pm.environment.unset(\"rightAuthorization\");",
                    "pm.environment.unset(\"badSerialNumber\");"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "b16d56fa-b16e-4ec8-8e56-2cafedc85e96",
          "type": "text/javascript",
          "exec": [
            "var CryptoJS = require(\"crypto-js\");",
            "",
            "globalFunctions = {",
            "    makeRandomString: function() {",
            "      var text = \"\";",
            "      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
            "    ",
            "      for (var i = 0; i < 10; i++)",
            "        text += possible.charAt(Math.floor(Math.random() * possible.length));",
            "    ",
            "      return text;",
            "    },",
            "    makeRandomInt:function() {",
            "      var text = \"\";",
            "      var possible = \"0123456789\";",
            "    ",
            "      for (var i = 0; i < 10; i++)",
            "        text += possible.charAt(Math.floor(Math.random() * possible.length));",
            "    ",
            "      return text;",
            "    },",
            "    getAuthToken:function(userName, userPassword) {",
            "      var rawStr = CryptoJS.enc.Utf8.parse(userName + \":\" + userPassword);",
            "      var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
            "    ",
            "      return base64;",
            "    }",
            "};",
            "",
            "pm.environment.set(\"rightAuthorization\", globalFunctions.getAuthToken(pm.globals.get('userName'), pm.globals.get(\"userPassword\")));"
          ],
          "_lastExecutionId": "30f6e314-39cf-4e5b-b5de-16e68667c7ba"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d78e9c9b-15f9-4f6d-acd0-7feb7a5660cf",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "1b06460e-cd9a-4811-81b9-2dcec029be34"
        }
      }
    ],
    "variable": [
      {
        "id": "b1160226-bcdf-4432-a3ed-2e7748257759",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "type": "string",
        "value": "1.0",
        "key": "apiVersion"
      }
    ],
    "info": {
      "id": "3bd6389e-16fe-4ebd-81a9-509730912a96",
      "name": "SmartBedAPIGateaway",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2018-05-21T11:57:34.062Z",
      "postman_exported_using": "Newman/3.9.3"
    },
    "id": "0548a04d-dce2-4720-a8ec-743f0cac5d07",
    "name": "DevHealthcare",
    "values": [
      {
        "type": "any",
        "value": "api-procare-d1.physio-labs.com",
        "key": "host"
      },
      {
        "type": "any",
        "value": "c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ==",
        "key": "rightAuthorization"
      }
    ]
  },
  "globals": {
    "_": {
      "postman_variable_scope": "globals",
      "postman_exported_at": "2018-05-21T11:57:34.062Z",
      "postman_exported_using": "Newman/3.9.3"
    },
    "id": "90d847aa-a75b-406d-878f-fdf89b21222e",
    "name": "My Workspace Globals",
    "values": [
      {
        "type": "any",
        "value": "sem.account.admin014",
        "key": "userName"
      },
      {
        "type": "any",
        "value": "Password1!",
        "key": "userPassword"
      },
      {
        "type": "any",
        "value": "7108632732",
        "key": "agentSerialNumber"
      },
      {
        "type": "any",
        "value": "r0AX0Vmf7ka6ehX0u0Ijjg==",
        "key": "agentPassword"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 72,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 35,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 36,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 36,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 332.0571428571429,
      "started": 1526903956629,
      "completed": 1526903970258
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 18,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e012b8c9-9afe-4498-8000-50162162a51c",
          "httpRequestId": "89395435-aaac-492f-afe2-a5a6f2779574",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "f8a5be24-3c1a-4a08-a18a-246a2dfb3018"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "3385932756"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "90ecbd81-e6eb-4785-a90e-1f30dcc5439f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:17 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "bb491c28-31d1-44a9-9269-eb56e6183e88"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 233,
          "responseSize": 0
        },
        "id": "b9af5c0f-6174-4dc2-b399-7904841107bc",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 18,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e012b8c9-9afe-4498-8000-50162162a51c",
          "httpRequestId": "89395435-aaac-492f-afe2-a5a6f2779574",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "f8a5be24-3c1a-4a08-a18a-246a2dfb3018"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "3385932756"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "90ecbd81-e6eb-4785-a90e-1f30dcc5439f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:17 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "bb491c28-31d1-44a9-9269-eb56e6183e88"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 233,
          "responseSize": 0
        },
        "id": "b9af5c0f-6174-4dc2-b399-7904841107bc",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d789c13-26c4-4d4d-b69f-6cf415f8704a",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 1,
          "cr": true,
          "httpRequestId": "c21d753e-6c19-4fc8-bca0-50214a51b309"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 202
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"gatewayModel\": \"5212-500-005_00000\",\r\n  \"gatewaySerial\": \"\",\r\n  \"ipAddress\": \"172.156.50.62\",\r\n  \"softwareVersion\": \"1.0.0.2\",\r\n  \"description\": \"University of Kentucky\",\r\n  \"totalDevices\": 800\r\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "496776c8-857e-46d3-9164-e77acc3073f2",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:18 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "2708bb55-55e9-4034-bf94-beb54e8d49d9"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              66,
              97,
              100,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              119,
              101,
              110,
              116,
              32,
              119,
              114,
              111,
              110,
              103,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              34,
              44,
              34,
              105,
              110,
              110,
              101,
              114,
              69,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              77,
              111,
              100,
              101,
              108,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              46,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              34,
              58,
              34,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              125,
              93,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 222,
          "responseSize": 256
        },
        "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3949d835-b82d-4ebf-ac22-e0721a7d50c6",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 2,
          "cr": true,
          "httpRequestId": "62626209-2d0d-4f5a-85ff-8810661489c6",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "5740e7cc-e207-43d5-8ac9-e4624d4a67a5"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "5835783662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3f753a92-cd3f-4413-824b-bc22e951671b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:18 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "fa164cbb-255b-4749-bfbb-d5df6603e635"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 228,
          "responseSize": 0
        },
        "id": "22f428e9-fb85-461b-a384-c7d2321dcef3",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3949d835-b82d-4ebf-ac22-e0721a7d50c6",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 2,
          "cr": true,
          "httpRequestId": "62626209-2d0d-4f5a-85ff-8810661489c6",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "5740e7cc-e207-43d5-8ac9-e4624d4a67a5"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "5835783662"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3f753a92-cd3f-4413-824b-bc22e951671b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:18 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "fa164cbb-255b-4749-bfbb-d5df6603e635"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 228,
          "responseSize": 0
        },
        "id": "22f428e9-fb85-461b-a384-c7d2321dcef3",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e39a565-1808-4f2a-af33-4654e715d117",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 3,
          "cr": true,
          "httpRequestId": "3acb732b-2740-4103-9641-22fd0564aed0",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "16978fe4-0988-466d-9012-961c9277bfdc"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "6498670793"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c874c476-7c6a-4a8f-94e2-faaf4bc2a2bc",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:19 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "386194db-0b0c-4aff-a22c-a529a130eb0f"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 234,
          "responseSize": 0
        },
        "id": "8e93a774-c025-4ec9-848c-7a9bb616ac5b",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e39a565-1808-4f2a-af33-4654e715d117",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 3,
          "cr": true,
          "httpRequestId": "3acb732b-2740-4103-9641-22fd0564aed0",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "16978fe4-0988-466d-9012-961c9277bfdc"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "6498670793"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c874c476-7c6a-4a8f-94e2-faaf4bc2a2bc",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:19 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "386194db-0b0c-4aff-a22c-a529a130eb0f"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 234,
          "responseSize": 0
        },
        "id": "8e93a774-c025-4ec9-848c-7a9bb616ac5b",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "1338528c-d7d6-40ee-b7bb-9181c6c0a774",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 4,
          "cr": true,
          "httpRequestId": "bfe8419f-bffe-491f-ba2b-6a845d711d7d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "a0ba2ee1-1a47-48e9-84d6-62711f7b462d"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "6520123018"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7feef452-1069-4692-956c-cd138a72a671",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:19 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "f8ce0543-67b1-4776-b2cf-4ea6f542a8b2"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "b0f56013-62bb-4a76-b456-3987536c498f",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "1338528c-d7d6-40ee-b7bb-9181c6c0a774",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 4,
          "cr": true,
          "httpRequestId": "bfe8419f-bffe-491f-ba2b-6a845d711d7d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "a0ba2ee1-1a47-48e9-84d6-62711f7b462d"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "6520123018"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7feef452-1069-4692-956c-cd138a72a671",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:19 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "f8ce0543-67b1-4776-b2cf-4ea6f542a8b2"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "b0f56013-62bb-4a76-b456-3987536c498f",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "2036512a-9289-4afc-9dbf-c1f1305c1451",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 5,
          "cr": true,
          "httpRequestId": "bf41a307-4058-4f0d-8a10-0dc24e742223",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "f0e0536a-8806-4bf2-94ea-ae3af2b74015"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2065200410"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6804489d-b68a-45bb-ab0b-79a8e5faefac",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:20 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "30fa7401-27be-4257-acfc-f75a4e4dba79"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 231,
          "responseSize": 0
        },
        "id": "4f49425d-791f-482d-98c9-92f831e1e09e",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "2036512a-9289-4afc-9dbf-c1f1305c1451",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 5,
          "cr": true,
          "httpRequestId": "bf41a307-4058-4f0d-8a10-0dc24e742223",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "f0e0536a-8806-4bf2-94ea-ae3af2b74015"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2065200410"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6804489d-b68a-45bb-ab0b-79a8e5faefac",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:20 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "30fa7401-27be-4257-acfc-f75a4e4dba79"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 231,
          "responseSize": 0
        },
        "id": "4f49425d-791f-482d-98c9-92f831e1e09e",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "cba79955-79ff-4e25-a91b-74e2a56bca0f",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 6,
          "cr": true,
          "httpRequestId": "a7abce9f-a73f-403e-83d7-207b0ae11e40",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "f145261f-96c8-40ae-b258-2edfb2e8a97a"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "1533427334"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "207f73dd-8dc9-41fc-9031-e87af51a6e46",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:20 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "1b44228e-e4f9-4bf4-a069-7265de40cc74"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "af948f7e-1198-49d9-849b-7767c95bbf4e",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "cba79955-79ff-4e25-a91b-74e2a56bca0f",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 6,
          "cr": true,
          "httpRequestId": "a7abce9f-a73f-403e-83d7-207b0ae11e40",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "f145261f-96c8-40ae-b258-2edfb2e8a97a"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "1533427334"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "207f73dd-8dc9-41fc-9031-e87af51a6e46",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:20 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "1b44228e-e4f9-4bf4-a069-7265de40cc74"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "af948f7e-1198-49d9-849b-7767c95bbf4e",
        "assertions": [
          {
            "assertion": "Added agent can't be added because of leak of required field"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "46b7a2ea-89a5-4758-8401-c0a874fb1731",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 7,
          "cr": true,
          "httpRequestId": "34d77ce5-f39f-425b-93ff-24cd7d58c137",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "cd2a1e8d-d486-4da7-a6fc-eb679847a0c5"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "0097968196"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1bf78eee-d4ef-41e2-9eba-f02a684066ad",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:21 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "09e39ae7-aa54-438a-a657-08eb95dd8f14"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 230,
          "responseSize": 0
        },
        "id": "5b58b1e6-2dc6-4667-a429-55144ecc2f58",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "46b7a2ea-89a5-4758-8401-c0a874fb1731",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 7,
          "cr": true,
          "httpRequestId": "34d77ce5-f39f-425b-93ff-24cd7d58c137",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "cd2a1e8d-d486-4da7-a6fc-eb679847a0c5"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "0097968196"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1bf78eee-d4ef-41e2-9eba-f02a684066ad",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:21 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "09e39ae7-aa54-438a-a657-08eb95dd8f14"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 230,
          "responseSize": 0
        },
        "id": "5b58b1e6-2dc6-4667-a429-55144ecc2f58",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "91942b2f-c86b-4ad5-921b-685205afccc5",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 8,
          "cr": true,
          "httpRequestId": "84827f30-b38c-40f5-adef-4e3330ef3212",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "177c8826-1eeb-4910-a34b-1fdc0f1ac0cb"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "8626477128"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6dbabc8e-de20-4c19-83cc-ad05d5821d03",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:21 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "ff1fc63a-48a1-44ee-835b-bda8352c8361"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 230,
          "responseSize": 0
        },
        "id": "16a28491-c664-4d84-a460-0767e6168d13",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "91942b2f-c86b-4ad5-921b-685205afccc5",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 8,
          "cr": true,
          "httpRequestId": "84827f30-b38c-40f5-adef-4e3330ef3212",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "177c8826-1eeb-4910-a34b-1fdc0f1ac0cb"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "8626477128"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6dbabc8e-de20-4c19-83cc-ad05d5821d03",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:21 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "ff1fc63a-48a1-44ee-835b-bda8352c8361"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 230,
          "responseSize": 0
        },
        "id": "16a28491-c664-4d84-a460-0767e6168d13",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "9d74488e-ca05-4505-a395-1265bc929656",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 9,
          "cr": true,
          "httpRequestId": "93332b1c-fb80-4687-a88e-3a81d205345e",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "6452bac5-d547-4cae-93ee-20e2cdf42e74"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2825225526"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "15793c43-0c9c-4e56-ba3c-e7653e352696",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:22 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "63b9d463-75f2-441b-bee2-52821691ee50"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "131a1a77-93d9-457e-9381-400e51f0b44a",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "9d74488e-ca05-4505-a395-1265bc929656",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 9,
          "cr": true,
          "httpRequestId": "93332b1c-fb80-4687-a88e-3a81d205345e",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "6452bac5-d547-4cae-93ee-20e2cdf42e74"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2825225526"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "15793c43-0c9c-4e56-ba3c-e7653e352696",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:22 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "63b9d463-75f2-441b-bee2-52821691ee50"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "131a1a77-93d9-457e-9381-400e51f0b44a",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca5882fe-89de-4a70-9b02-464e0c5441c8",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 10,
          "cr": true,
          "httpRequestId": "9e074dd9-8c4d-4048-b0c1-5be4002d6f9d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "8d053038-3f9a-447f-b05d-1bb030e05fd0"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2023952594"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dc3f4b6e-e7b8-4acf-b632-6d0c8f83c5db",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:23 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "081f39e8-59b4-4edd-b48e-994de1c4d59d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "e3096b38-7010-4682-a44a-1173f5342f47",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca5882fe-89de-4a70-9b02-464e0c5441c8",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 10,
          "cr": true,
          "httpRequestId": "9e074dd9-8c4d-4048-b0c1-5be4002d6f9d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "8d053038-3f9a-447f-b05d-1bb030e05fd0"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2023952594"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dc3f4b6e-e7b8-4acf-b632-6d0c8f83c5db",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:23 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "081f39e8-59b4-4edd-b48e-994de1c4d59d"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "e3096b38-7010-4682-a44a-1173f5342f47",
        "assertions": [
          {
            "assertion": "Do not register agent with wrong user creds"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "de8f72a2-ae8c-4aa3-a4a2-a5330cfda1c9",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 11,
          "cr": true,
          "httpRequestId": "e5ef4c1c-565a-4e34-a750-66972e163c6d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "56974435-8954-4bbb-ab5e-0f2e5cabf5ea"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "1298201267"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "972f17a6-2b6a-4f98-8968-13394c8f7318",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:23 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "1fcfe085-22a6-44eb-8ba3-0e82026068b2"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "5d495fe5-35c5-4ca0-b74f-a3f324d7a35c",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of disabled account, status code is 401"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "de8f72a2-ae8c-4aa3-a4a2-a5330cfda1c9",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 11,
          "cr": true,
          "httpRequestId": "e5ef4c1c-565a-4e34-a750-66972e163c6d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "56974435-8954-4bbb-ab5e-0f2e5cabf5ea"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "1298201267"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "972f17a6-2b6a-4f98-8968-13394c8f7318",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:23 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "1fcfe085-22a6-44eb-8ba3-0e82026068b2"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 0
        },
        "id": "5d495fe5-35c5-4ca0-b74f-a3f324d7a35c",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of disabled account, status code is 401"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "625d8ae5-20a2-48c7-b940-58244ccf9b60",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 12,
          "cr": true,
          "httpRequestId": "adfdd5f8-1c66-4b34-910e-d29fe359c3f5",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "ad4fc73f-7e0d-47ab-b2d0-874445f5483c"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7239383541"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d5fc5fd3-f213-416c-b664-93a29fe1570f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:24 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "ee65834a-f78d-4c68-bb25-bba6ceaff012"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "be2655fb-52e5-4052-a340-f92432fdc4d6",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "625d8ae5-20a2-48c7-b940-58244ccf9b60",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 12,
          "cr": true,
          "httpRequestId": "adfdd5f8-1c66-4b34-910e-d29fe359c3f5",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "ad4fc73f-7e0d-47ab-b2d0-874445f5483c"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7239383541"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d5fc5fd3-f213-416c-b664-93a29fe1570f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:24 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "ee65834a-f78d-4c68-bb25-bba6ceaff012"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 229,
          "responseSize": 0
        },
        "id": "be2655fb-52e5-4052-a340-f92432fdc4d6",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "897a4228-a3f6-4a77-a360-5471a9819c11",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 13,
          "cr": true,
          "httpRequestId": "6c3bcd56-be96-476f-bcd7-5c5be741bfca",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "8532de82-3c5b-4918-bb2e-e911605a39c4"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "8969881439"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3861186f-8d5e-43d0-8329-e96776d5fe35",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:24 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "8266f621-038b-4c7c-915a-00f230071dd1"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 241,
          "responseSize": 0
        },
        "id": "36f4249f-52a5-4562-a327-513b484e7c58",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "897a4228-a3f6-4a77-a360-5471a9819c11",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 13,
          "cr": true,
          "httpRequestId": "6c3bcd56-be96-476f-bcd7-5c5be741bfca",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "8532de82-3c5b-4918-bb2e-e911605a39c4"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "8969881439"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3861186f-8d5e-43d0-8329-e96776d5fe35",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:24 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "8266f621-038b-4c7c-915a-00f230071dd1"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 241,
          "responseSize": 0
        },
        "id": "36f4249f-52a5-4562-a327-513b484e7c58",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1e42309-da89-4daf-98a0-57e252401dee",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 14,
          "cr": true,
          "httpRequestId": "5031638b-a30a-4f4e-9572-7701a3b24624",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "ac3282ec-2e62-4805-a5c0-db160827ad70"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2477691765"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b02e10ba-2ca6-49a4-9ffb-bbfc17f36e59",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:25 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "a74a7d99-d962-47f5-a8a6-58f101bea97e"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 234,
          "responseSize": 0
        },
        "id": "da2e1555-34dd-4d47-81c3-a184cdb59ba2",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1e42309-da89-4daf-98a0-57e252401dee",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 14,
          "cr": true,
          "httpRequestId": "5031638b-a30a-4f4e-9572-7701a3b24624",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "ac3282ec-2e62-4805-a5c0-db160827ad70"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "2477691765"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b02e10ba-2ca6-49a4-9ffb-bbfc17f36e59",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:25 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "a74a7d99-d962-47f5-a8a6-58f101bea97e"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 234,
          "responseSize": 0
        },
        "id": "da2e1555-34dd-4d47-81c3-a184cdb59ba2",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3a9bdd5c-9e9e-4304-8138-97e792c66f8c",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 15,
          "cr": true,
          "httpRequestId": "bd31794a-9fc5-40a4-b4e0-39880728de9d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "d7dbed00-e343-4174-90d3-20e3420f0d79"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7546558480"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5043dd7e-2f34-4ae3-948e-215b03fab37f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:25 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "2085356c-5295-4794-91b9-c49c0859fa4f"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 246,
          "responseSize": 0
        },
        "id": "868e9f3b-29f5-40b8-bdb7-bf8a619b8cbd",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3a9bdd5c-9e9e-4304-8138-97e792c66f8c",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 15,
          "cr": true,
          "httpRequestId": "bd31794a-9fc5-40a4-b4e0-39880728de9d",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "d7dbed00-e343-4174-90d3-20e3420f0d79"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7546558480"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5043dd7e-2f34-4ae3-948e-215b03fab37f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:25 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "2085356c-5295-4794-91b9-c49c0859fa4f"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 246,
          "responseSize": 0
        },
        "id": "868e9f3b-29f5-40b8-bdb7-bf8a619b8cbd",
        "assertions": [
          {
            "assertion": "Agent can't be registered because of unsupported media type, status code is 415"
          },
          {
            "assertion": "Unregistered agent can't be received and status code is 404"
          }
        ]
      },
      {
        "cursor": {
          "ref": "ce690dd7-5986-403c-a1dd-371d056d5a8b",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 16,
          "cr": true,
          "httpRequestId": "7c04721a-664e-47f0-9aa3-aa8e52e19503",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "6352458a-eac3-4ad7-940a-311620a5fa1b"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "496f17a3-4a88-4057-bc26-cb7e83dde4ab",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "11b64e1b-4c0a-41a7-9895-a5ba5d95b1b8"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              77,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              53,
              50,
              49,
              50,
              45,
              53,
              48,
              48,
              45,
              48,
              48,
              53,
              95,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              34,
              58,
              34,
              55,
              49,
              48,
              56,
              54,
              51,
              50,
              55,
              51,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              110,
              105,
              118,
              101,
              114,
              115,
              105,
              116,
              121,
              32,
              111,
              102,
              32,
              75,
              101,
              110,
              116,
              117,
              99,
              107,
              121,
              34,
              44,
              34,
              115,
              111,
              102,
              116,
              119,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              46,
              50,
              34,
              44,
              34,
              105,
              112,
              65,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              55,
              50,
              46,
              49,
              53,
              54,
              46,
              53,
              48,
              46,
              54,
              50,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              58,
              56,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 224,
          "responseSize": 180
        },
        "id": "2dd17c6d-d447-41b0-83f0-70bb4b08c516",
        "assertions": [
          {
            "assertion": "Agent should be registered successfully, status code is 201"
          },
          {
            "assertion": "Registered agent should be received and status code is 200"
          },
          {
            "assertion": "Body contains SerialNumber"
          },
          {
            "assertion": "Body contains Password"
          },
          {
            "assertion": "Response body matches the Agent credentils schema"
          }
        ]
      },
      {
        "cursor": {
          "ref": "ce690dd7-5986-403c-a1dd-371d056d5a8b",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 16,
          "cr": true,
          "httpRequestId": "7c04721a-664e-47f0-9aa3-aa8e52e19503",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "6352458a-eac3-4ad7-940a-311620a5fa1b"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "496f17a3-4a88-4057-bc26-cb7e83dde4ab",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "11b64e1b-4c0a-41a7-9895-a5ba5d95b1b8"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              77,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              53,
              50,
              49,
              50,
              45,
              53,
              48,
              48,
              45,
              48,
              48,
              53,
              95,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              34,
              58,
              34,
              55,
              49,
              48,
              56,
              54,
              51,
              50,
              55,
              51,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              110,
              105,
              118,
              101,
              114,
              115,
              105,
              116,
              121,
              32,
              111,
              102,
              32,
              75,
              101,
              110,
              116,
              117,
              99,
              107,
              121,
              34,
              44,
              34,
              115,
              111,
              102,
              116,
              119,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              46,
              50,
              34,
              44,
              34,
              105,
              112,
              65,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              55,
              50,
              46,
              49,
              53,
              54,
              46,
              53,
              48,
              46,
              54,
              50,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              58,
              56,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 224,
          "responseSize": 180
        },
        "id": "2dd17c6d-d447-41b0-83f0-70bb4b08c516",
        "assertions": [
          {
            "assertion": "Agent should be registered successfully, status code is 201"
          },
          {
            "assertion": "Registered agent should be received and status code is 200"
          },
          {
            "assertion": "Body contains SerialNumber"
          },
          {
            "assertion": "Body contains Password"
          },
          {
            "assertion": "Response body matches the Agent credentils schema"
          }
        ]
      },
      {
        "cursor": {
          "ref": "50eae7dd-b6e1-416c-8c87-d47bd4329692",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 17,
          "cr": true,
          "httpRequestId": "04de64bc-ec18-46ec-a486-ca391617672b",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "00b7054d-acfc-4b1c-80cb-f473edc1eb59",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "c4b93fa9-b35b-41af-8655-84dc134b4c92"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              77,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              53,
              50,
              49,
              50,
              45,
              53,
              48,
              48,
              45,
              48,
              48,
              53,
              95,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              34,
              58,
              34,
              55,
              49,
              48,
              56,
              54,
              51,
              50,
              55,
              51,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              110,
              105,
              118,
              101,
              114,
              115,
              105,
              116,
              121,
              32,
              111,
              102,
              32,
              75,
              101,
              110,
              116,
              117,
              99,
              107,
              121,
              34,
              44,
              34,
              115,
              111,
              102,
              116,
              119,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              46,
              50,
              34,
              44,
              34,
              105,
              112,
              65,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              55,
              50,
              46,
              49,
              53,
              54,
              46,
              53,
              48,
              46,
              54,
              50,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              58,
              56,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 219,
          "responseSize": 180
        },
        "id": "eecdc3b3-eb39-4ba8-b5a3-4ec453e2edab",
        "assertions": [
          {
            "assertion": "Agent should be registered successfully with existing the same gateawaySerial, status code is 201"
          },
          {
            "assertion": "Registered agent should be received and status code is 200"
          },
          {
            "assertion": "Body contains SerialNumber"
          },
          {
            "assertion": "Body contains Password"
          },
          {
            "assertion": "Response body matches the Agent credentils schema"
          }
        ]
      },
      {
        "cursor": {
          "ref": "50eae7dd-b6e1-416c-8c87-d47bd4329692",
          "length": 1,
          "cycles": 18,
          "position": 0,
          "iteration": 17,
          "cr": true,
          "httpRequestId": "04de64bc-ec18-46ec-a486-ca391617672b",
          "scriptId": "82702474-bdc9-43b4-bbff-7435e86f4184",
          "execution": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
        },
        "item": {
          "id": "818e6e1f-15b9-4d19-b7de-9c16572a5a39",
          "name": "Register agent",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "bedagents"
              ],
              "host": [
                "{{host}}"
              ],
              "query": [
                {
                  "key": "api-version",
                  "value": "{{apiVersion}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{mediaType}}"
              },
              {
                "key": "{{authorization}}",
                "value": "{{authorizationHeaderToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"gatewayModel\": \"{{gatewayModel}}\",\r\n  \"gatewaySerial\": \"{{gatewaySerial}}\",\r\n  \"ipAddress\": \"{{ipAddress}}\",\r\n  \"softwareVersion\": \"{{softwareVersion}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"totalDevices\": {{totalDevices}}\r\n}"
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82702474-bdc9-43b4-bbff-7435e86f4184",
                "type": "text/javascript",
                "exec": [
                  "let host = pm.environment.get(\"host\");",
                  "let gatewaySerial = pm.environment.get(\"gatewaySerial\");",
                  "",
                  "let getRequest = {",
                  "      url: 'https://' + pm.environment.get(\"host\") + '/bedagents/' + gatewaySerial + '?api-version=1.0',",
                  "      method: 'GET',",
                  "      header: 'Authorization:Basic ' + pm.environment.get(\"rightAuthorization\")",
                  "};",
                  "",
                  "let agentCredentialsSchema = {",
                  "    \"required\": [\"serialNumber\", \"password\"],",
                  "    \"properties\":{",
                  "        \"serialNumber\":{",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"password\": {",
                  "            \"type\": \"string\"",
                  "        }",
                  "    }",
                  "};",
                  "    ",
                  "if(data.testCase === \"agentFields\")",
                  "{",
                  "    pm.test(\"Added agent can't be added because of leak of required field\", function(){",
                  "        pm.response.to.have.status(400);",
                  "    })",
                  "    ",
                  "    if(gatewaySerial !== \"\")",
                  "    {",
                  "        pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "    }",
                  "}",
                  "else if(data.testCase === \"disabledAccount\"){",
                  "    pm.test(\"Agent can't be registered because of disabled account, status code is 401\", function(){",
                  "    pm.response.to.have.status(401);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "              pm.sendRequest(getRequest, function (err, response) {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });  ",
                  "        })",
                  "",
                  "    pm.environment.unset(\"disabledUserName\");",
                  "    pm.environment.unset(\"disabledUserPassword\");",
                  "}",
                  "else if(data.testCase === \"unsupportedTypes\"){",
                  "    pm.test(\"Agent can't be registered because of unsupported media type, status code is 415\", function(){",
                  "    pm.response.to.have.status(415);",
                  "    })",
                  "",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "else if(data.testCase === \"successRegister\" || data.testCase === \"registerWithExistingSerial\"){",
                  "    if(data.testCase === \"successRegister\")",
                  "    {",
                  "        pm.test(\"Agent should be registered successfully, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "        ",
                  "        pm.environment.set(\"successfullyAddedGateawaySerial\", pm.environment.get(\"gatewaySerial\"));",
                  "    }",
                  "    else if(data.testCase === \"registerWithExistingSerial\"){",
                  "        pm.test(\"Agent should be registered successfully with existing the same gateawaySerial, status code is 201\", function(){",
                  "        pm.response.to.have.status(201);",
                  "        })",
                  "          ",
                  "        pm.globals.set(\"agentSerialNumber\", gatewaySerial);",
                  "        pm.globals.set(\"agentPassword\", pm.response.json().password);",
                  "        pm.environment.unset(\"successfullyAddedGateawaySerial\");  ",
                  "    }",
                  "    ",
                  "    pm.test(\"Registered agent should be received and status code is 200\", function(){",
                  "        pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(200);",
                  "        });  ",
                  "    })",
                  "    ",
                  "    pm.test(\"Body contains SerialNumber\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"serialNumber\");",
                  "    });",
                  "",
                  "    pm.test(\"Body contains Password\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"password\");",
                  "    });",
                  "    ",
                  "    pm.test(\"Response body matches the Agent credentils schema\", function () {",
                  "        pm.expect(tv4.validate(pm.response.json(), agentCredentialsSchema)).to.be.true;",
                  "    });",
                  "}",
                  "else if(data.testCase === \"agentWrongCreds\"){",
                  "    ",
                  "    pm.test(\"Do not register agent with wrong user creds\", function(){",
                  "        pm.response.to.have.status(401);",
                  "    })",
                  "    ",
                  "    pm.test(\"Unregistered agent can't be received and status code is 404\", function(){",
                  "          pm.sendRequest(getRequest, function (err, response) {",
                  "            pm.expect(response.code).to.eql(404);",
                  "        });  ",
                  "    })",
                  "}",
                  "",
                  "pm.environment.unset(\"userName\");",
                  "pm.environment.unset(\"userPassword\");",
                  "pm.environment.unset(\"gatewaySerial\")",
                  "pm.environment.unset(\"authorization\");",
                  "pm.environment.unset(\"authorizationHeaderToken\");"
                ],
                "_lastExecutionId": "c1e02fa8-adf1-46aa-81f8-b34eaff666d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5026d28b-aa0a-439f-adb0-e745dcb1a85b",
                "type": "text/javascript",
                "exec": [
                  "pm.globals.set(\"userName\", \"sem.account.admin014\");",
                  "pm.globals.set(\"userPassword\", \"Password1!\");",
                  "pm.environment.set(\"userName\", pm.globals.get(\"userName\"));",
                  "pm.environment.set(\"userPassword\", pm.globals.get(\"userPassword\"));",
                  "let isBasicAuth = true;",
                  "",
                  "if(data.testCase !== \"registerWithExistingSerial\")",
                  "{",
                  "    if(data.isGatewaySerial)",
                  "    {",
                  "        pm.environment.set(\"gatewaySerial\", globalFunctions.makeRandomInt());",
                  "        // console.log(\"----\" + pm.variables.get(\"gatewaySerial\"));",
                  "    }",
                  "    else{",
                  "        pm.environment.set(\"gatewaySerial\", \"\");",
                  "    }",
                  "}",
                  "else{",
                  "    pm.environment.set(\"gatewaySerial\", pm.environment.get(\"successfullyAddedGateawaySerial\"));",
                  "}",
                  "",
                  "if(data.testCase === \"agentWrongCreds\"){",
                  "    if(data.userName == null){",
                  "        pm.environment.set(\"userName\", globalFunctions.makeRandomString());",
                  "    }",
                  "    ",
                  "    if(data.userPassword == null){",
                  "        pm.environment.set(\"userPassword\", globalFunctions.makeRandomInt());",
                  "    }",
                  "",
                  "    if(!data.isAuth){",
                  "        isBasicAuth = false;",
                  "    }",
                  "}",
                  "",
                  "if(isBasicAuth)",
                  "{",
                  "    pm.environment.set(\"authorization\", \"Authorization\");",
                  "    pm.environment.set(\"authorizationHeaderToken\", \"Basic \" + globalFunctions.getAuthToken(pm.variables.get('userName'), pm.variables.get(\"userPassword\")));",
                  "}",
                  "else{",
                  "    pm.environment.set(\"authorization\", \"\");   ",
                  "}"
                ],
                "_lastExecutionId": "bc4bf77b-644f-47c8-9bc5-e5f2eceff839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "bedagents",
              "7108632732"
            ],
            "host": [
              "api-procare-d1",
              "physio-labs",
              "com"
            ],
            "query": [
              {
                "key": "api-version",
                "value": "1.0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic c2VtLmFjY291bnQuYWRtaW4wMTQ6UGFzc3dvcmQxIQ=="
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.1.3"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "api-procare-d1.physio-labs.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "00b7054d-acfc-4b1c-80cb-f473edc1eb59",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 21 May 2018 11:59:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "Kestrel"
            },
            {
              "key": "X-Correlation-Id",
              "value": "c4b93fa9-b35b-41af-8655-84dc134b4c92"
            },
            {
              "key": "X-Stryker-Service",
              "value": "Stryker.ProCare.Gateway.SmartBedAgent/1.1.0.9532"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              77,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              53,
              50,
              49,
              50,
              45,
              53,
              48,
              48,
              45,
              48,
              48,
              53,
              95,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              83,
              101,
              114,
              105,
              97,
              108,
              34,
              58,
              34,
              55,
              49,
              48,
              56,
              54,
              51,
              50,
              55,
              51,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              85,
              110,
              105,
              118,
              101,
              114,
              115,
              105,
              116,
              121,
              32,
              111,
              102,
              32,
              75,
              101,
              110,
              116,
              117,
              99,
              107,
              121,
              34,
              44,
              34,
              115,
              111,
              102,
              116,
              119,
              97,
              114,
              101,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              46,
              50,
              34,
              44,
              34,
              105,
              112,
              65,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              55,
              50,
              46,
              49,
              53,
              54,
              46,
              53,
              48,
              46,
              54,
              50,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              68,
              101,
              118,
              105,
              99,
              101,
              115,
              34,
              58,
              56,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 219,
          "responseSize": 180
        },
        "id": "eecdc3b3-eb39-4ba8-b5a3-4ec453e2edab",
        "assertions": [
          {
            "assertion": "Agent should be registered successfully with existing the same gateawaySerial, status code is 201"
          },
          {
            "assertion": "Registered agent should be received and status code is 200"
          },
          {
            "assertion": "Body contains SerialNumber"
          },
          {
            "assertion": "Body contains Password"
          },
          {
            "assertion": "Response body matches the Agent credentils schema"
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2098
    },
    "failures": [],
    "error": null
  }
}